{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ablem/OneDrive/Projetos/frontEnd-Estudo/ang-eCommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, makeEnvironmentProviders, Directive, Input, Output, HostListener, Pipe } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  triggerOnMaskChange: false,\n  maskFilled: new EventEmitter(),\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    U: {\n      pattern: new RegExp('[A-Z]')\n    },\n    L: {\n      pattern: new RegExp('[a-z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\nclass NgxMaskApplierService {\n  constructor() {\n    this._config = inject(NGX_MASK_CONFIG);\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.hiddenInput = this._config.hiddenInput;\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.specialCharacters = this._config.specialCharacters;\n    this.patterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n    this._shift = new Set();\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.shownMaskExpression = '';\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n      let x = [];\n      let decimalChar = '';\n      if (Array.isArray(decimalChars)) {\n        const regExp = new RegExp(decimalChars.map(v => '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v).join('|'));\n        x = str.split(regExp);\n        decimalChar = str.match(regExp)?.[0] ?? '';\n      } else {\n        x = str.split(decimalChars);\n        decimalChar = decimalChars;\n      }\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n      let res = x[0] ?? '';\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === '-') {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n      const rgx = /(\\d+)(\\d{3})/;\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n      return res + decimals.substring(0, precision + 1);\n    };\n    this.percentage = str => {\n      return Number(str) >= 0 && Number(str) <= 100;\n    };\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split('.');\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n      return Infinity;\n    };\n    this.checkAndRemoveSuffix = inputValue => {\n      for (let i = this.suffix?.length - 1; i >= 0; i--) {\n        const substr = this.suffix.substring(i, this.suffix?.length);\n        if (inputValue.includes(substr) && i !== this.suffix?.length - 1 && (i - 1 < 0 || !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n          return inputValue.replace(substr, '');\n        }\n      }\n      return inputValue;\n    };\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      if (precision < Infinity) {\n        // TODO need think about decimalMarker\n        if (Array.isArray(decimalMarker)) {\n          const marker = decimalMarker.find(dm => dm !== this.thousandSeparator);\n          // eslint-disable-next-line no-param-reassign\n          decimalMarker = marker ? marker : decimalMarker[0];\n        }\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n        const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n        if (precisionMatchLength - 1 > precision) {\n          const diff = precisionMatchLength - 1 - precision;\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n        if (precision === 0 && this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n      return inputValue;\n    };\n  }\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression || typeof inputValue !== 'string') {\n      return '';\n    }\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n    if (!!this.suffix && inputValue?.length > 0) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n    const inputArray = inputValue.toString().split('');\n    if (maskExpression === 'IP') {\n      const valuesIP = inputValue.split('.');\n      this.ipError = this._validIP(valuesIP);\n      // eslint-disable-next-line no-param-reassign\n      maskExpression = '099.099.099.099';\n    }\n    const arr = [];\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i]?.match('\\\\d')) {\n        arr.push(inputValue[i] ?? '');\n      }\n    }\n    if (maskExpression === 'CPF_CNPJ') {\n      this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n      if (arr.length > 11) {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '000.000.000-00';\n      }\n    }\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') ||\n      // eslint-disable-next-line no-useless-escape\n      inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression);\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n        // eslint-disable-next-line no-param-reassign\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n      }\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.thousandSeparator && !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) && !backspaced ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      if (backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator) ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      }\n      // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n      const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n      let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n      //.replace(decimalMarkerEscaped, '');\n      if (Array.isArray(this.decimalMarker)) {\n        for (const marker of this.decimalMarker) {\n          invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n        }\n      } else {\n        invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n      }\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n      if (inputValue.match(invalidCharRegexp) || inputValue.length === 1 && this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n      const precision = this.getPrecision(maskExpression);\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep = result.length - inputValue.length;\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n        do {\n          this._shift.add(position + _shift);\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n        backspaceShift = true;\n        shift = shiftStep;\n        // eslint-disable-next-line no-param-reassign\n        position += shiftStep;\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for (\n      // eslint-disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? '') {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '') && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? '')) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '') && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? '')) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '')) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          const daysCount = 31;\n          if (maskExpression[cursor] === 'd') {\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12;\n            // mask without day\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for input\n            const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/');\n            // 10<day<31 && month<12 for input\n            const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for paste whole data\n            const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n            // 10<day<31 && month<12 for paste whole data\n            const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          result += inputSymbol;\n          cursor++;\n        } else if (inputSymbol === ' ' && maskExpression[cursor] === ' ') {\n          result += inputSymbol;\n          cursor++;\n        } else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? '') !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n          i--;\n        } else if (this.specialCharacters.indexOf(inputSymbol) > -1 && this.patterns[maskExpression[cursor] ?? ''] && this.patterns[maskExpression[cursor] ?? '']?.optional) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00' && !maskExpression.match(/^9+\\.0+$/)) {\n            result += inputArray[cursor];\n          }\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2] ?? '') && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2] ?? '') && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.specialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n          stepBack = true;\n        }\n      }\n    }\n    if (result.length + 1 === maskExpression.length && this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? '') !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n    let newPosition = position + 1;\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n    let actualShift = justPasted && !maskExpression.startsWith('separator') ? cursor : this._shift.has(position) ? shift : 0;\n    if (stepBack) {\n      actualShift--;\n    }\n    cb(actualShift, backspaceShift);\n    if (shift < 0) {\n      this._shift.clear();\n    }\n    let onlySpecial = false;\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.specialCharacters.includes(char));\n    }\n    let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n    return res;\n  }\n  _findSpecialChar(inputSymbol) {\n    return this.specialCharacters.find(val => val === inputSymbol);\n  }\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    this.patterns = this.customPattern ? this.customPattern : this.patterns;\n    return (this.patterns[maskSymbol]?.pattern && this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ?? false;\n  }\n  _stripToDecimal(str) {\n    return str.split('').filter((i, idx) => {\n      const isDecimalMarker = typeof this.decimalMarker === 'string' ? i === this.decimalMarker :\n      // TODO (inepipenko) use utility type\n      this.decimalMarker.includes(i);\n      return i.match('^-?\\\\d') || i === this.thousandSeparator || isDecimalMarker || i === '-' && idx === 0 && this.allowNegativeNumbers;\n    }).join('');\n  }\n  _charToRegExpExpression(char) {\n    // if (Array.isArray(char)) {\n    // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n    // }\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n    }\n    return char;\n  }\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n  _compareOrIncludes(value, comparedValue, excludedValue) {\n    return Array.isArray(comparedValue) ? comparedValue.filter(v => v !== excludedValue).includes(value) : value === comparedValue;\n  }\n  _validIP(valuesIP) {\n    return !(valuesIP.length === 4 && !valuesIP.some((value, index) => {\n      if (valuesIP.length !== index + 1) {\n        return value === '' || Number(value) > 255;\n      }\n      return value === '' || Number(value.substring(0, 3)) > 255;\n    }));\n  }\n}\nNgxMaskApplierService.ɵfac = function NgxMaskApplierService_Factory(t) {\n  return new (t || NgxMaskApplierService)();\n};\nNgxMaskApplierService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaskApplierService,\n  factory: NgxMaskApplierService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskApplierService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass NgxMaskService extends NgxMaskApplierService {\n  constructor() {\n    super(...arguments);\n    this.isNumberValue = false;\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n    this.writingValue = false;\n    this.maskChanged = false;\n    this.triggerOnMaskChange = false;\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    this.onChange = _ => {};\n    this.document = inject(DOCUMENT);\n    this._config = inject(NGX_MASK_CONFIG);\n    this._elementRef = inject(ElementRef, {\n      optional: true\n    });\n    this._renderer = inject(Renderer2, {\n      optional: true\n    });\n  }\n  // eslint-disable-next-line complexity\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression) {\n      return inputValue !== this.actualValue ? this.actualValue : inputValue;\n    }\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] ?? '' : '';\n    let newInputValue = '';\n    if (this.hiddenInput !== undefined && !this.writingValue) {\n      let actualResult = this.actualValue.split('');\n      // eslint-disable  @typescript-eslint/no-unused-expressions\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n      if (this.showMaskTyped) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.removeMask(inputValue);\n      }\n      // eslint-enable  @typescript-eslint/no-unused-expressions\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n    if (this.showMaskTyped) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.removeMask(inputValue);\n    }\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result);\n    // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    }\n    // b) remove decimal marker from list of special characters to mask\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.specialCharacters = this.specialCharacters.filter(item => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n      );\n    }\n\n    this.formControlResult(result);\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n      return result;\n    }\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown;\n    if (this.maskExpression.includes('H')) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n      return result + prefNmask;\n    }\n    return result + prefNmask.slice(resLen);\n  }\n  // get the number of characters that were shifted\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n    return countSkipedSymbol;\n  }\n  applyValueChanges(position, justPasted, backspaced,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    const formElement = this._elementRef?.nativeElement;\n    if (!formElement) {\n      return;\n    }\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n    if (formElement === this._getActiveElement()) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split('').map((curr, index) => {\n      if (this.patterns && this.patterns[maskExpression[index] ?? ''] && this.patterns[maskExpression[index] ?? '']?.symbol) {\n        return this.patterns[maskExpression[index] ?? '']?.symbol;\n      }\n      return curr;\n    }).join('');\n  }\n  // this function is not necessary, it checks result against maskExpression\n  getActualValue(res) {\n    const compare = res.split('').filter((symbol, i) => {\n      const maskChar = this.maskExpression[i] ?? '';\n      return this._checkSymbolMask(symbol, maskChar) || this.specialCharacters.includes(maskChar) && symbol === maskChar;\n    });\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n    return res;\n  }\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split('').map((currSymbol, index) => {\n      if (this.specialCharacters.includes(inputValue[index + 1] ?? '') && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = '';\n        return replaceSymbol;\n      }\n      return currSymbol;\n    }) || [];\n    return newInputValue.join('');\n  }\n  /**\n   * Convert number value to string\n   * 3.1415 -> '3.1415'\n   * 1e-7 -> '0.0000001'\n   */\n  numberToString(value) {\n    if (!value && value !== 0) {\n      return String(value);\n    }\n    return Number(value).toLocaleString('fullwide', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    });\n  }\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === 'IP') {\n          return this._checkForIp(inputVal);\n        }\n        if (this.maskExpression === 'CPF_CNPJ') {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n    return '';\n  }\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef?.nativeElement;\n    if (!formElement) {\n      return;\n    }\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(formElement.value, this.maskExpression);\n    }\n  }\n  set formElementProperty([name, value]) {\n    if (!this._renderer || !this._elementRef) {\n      return;\n    }\n    Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n  }\n  checkSpecialCharAmount(mask) {\n    const chars = mask.split('').filter(item => this._findSpecialChar(item));\n    return chars.length;\n  }\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n  _checkForIp(inputVal) {\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? '';\n      if (!value) {\n        continue;\n      }\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n    return '';\n  }\n  _checkForCpfCnpj(inputVal) {\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    if (inputVal === '#') {\n      return cpf;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? '';\n      if (!value) {\n        continue;\n      }\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n    if (arr.length === 11) {\n      return '';\n    }\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n      return cnpj.slice(15, cnpj.length);\n    }\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n    return '';\n  }\n  /**\n   * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n   */\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n  formControlResult(inputValue) {\n    if (this.writingValue || !this.triggerOnMaskChange && this.maskChanged) {\n      this.maskChanged = false;\n      return;\n    }\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n    } else if (this.dropSpecialCharacters) {\n      this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n    } else {\n      this.onChange(this._removeSuffix(inputValue));\n    }\n  }\n  _toNumber(value) {\n    if (!this.isNumberValue || value === '') {\n      return value;\n    }\n    const num = Number(value);\n    return Number.isNaN(num) ? value : num;\n  }\n  _removeMask(value, specialCharactersForRemove) {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n    return value ? value.replace(this.prefix, '') : value;\n  }\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n    return value ? value.replace(this.suffix, '') : value;\n  }\n  _retrieveSeparatorValue(result) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.specialCharacters);\n  }\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n  _replaceDecimalMarkerToDot(value) {\n    const markers = Array.isArray(this.decimalMarker) ? this.decimalMarker : [this.decimalMarker];\n    return value.replace(this._regExpForRemove(markers), '.');\n  }\n  _checkSymbols(result) {\n    if (result === '') {\n      return result;\n    }\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n    const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return Number(separatorValue);\n    }\n  }\n  // TODO should think about helpers or separting decimal precision to own property\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n  _checkPrecision(separatorExpression, separatorValue) {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n    return Number(separatorValue);\n  }\n}\nNgxMaskService.ɵfac = /* @__PURE__ */function () {\n  let ɵNgxMaskService_BaseFactory;\n  return function NgxMaskService_Factory(t) {\n    return (ɵNgxMaskService_BaseFactory || (ɵNgxMaskService_BaseFactory = i0.ɵɵgetInheritedFactory(NgxMaskService)))(t || NgxMaskService);\n  };\n}();\nNgxMaskService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaskService,\n  factory: NgxMaskService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @internal\n */\nfunction _configFactory() {\n  const initConfig = inject(INITIAL_CONFIG);\n  const configValue = inject(NEW_CONFIG);\n  return configValue instanceof Function ? {\n    ...initConfig,\n    ...configValue()\n  } : {\n    ...initConfig,\n    ...configValue\n  };\n}\nfunction provideNgxMask(configValue) {\n  return [{\n    provide: NEW_CONFIG,\n    useValue: configValue\n  }, {\n    provide: INITIAL_CONFIG,\n    useValue: initialConfig\n  }, {\n    provide: NGX_MASK_CONFIG,\n    useFactory: _configFactory\n  }, NgxMaskService];\n}\nfunction provideEnvironmentNgxMask(configValue) {\n  return makeEnvironmentProviders(provideNgxMask(configValue));\n}\nclass NgxMaskDirective {\n  constructor() {\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this.triggerOnMaskChange = null;\n    this.maskFilled = new EventEmitter();\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n    this.document = inject(DOCUMENT);\n    this._maskService = inject(NgxMaskService, {\n      self: true\n    });\n    this._config = inject(NGX_MASK_CONFIG);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    this.onChange = _ => {};\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    this.onTouch = () => {};\n  }\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n      triggerOnMaskChange\n    } = changes;\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n      if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n        this._setMask();\n      } else {\n        this._maskExpressionArray = [];\n        this._maskValue = maskExpression.currentValue || '';\n        this._maskService.maskExpression = this._maskValue;\n      }\n    }\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.specialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n    // Only overwrite the mask available patterns if a pattern has actually been passed in\n    if (patterns && patterns.currentValue) {\n      this._maskService.patterns = patterns.currentValue;\n    }\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.specialCharacters = this._maskService.specialCharacters.filter(c => c !== '-');\n      }\n    }\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n    if (triggerOnMaskChange) {\n      this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n    }\n    this._applyMask();\n  }\n  // eslint-disable-next-line complexity\n  validate({\n    value\n  }) {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n      for (const key in this._maskService.patterns) {\n        if (this._maskService.patterns[key]?.optional) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split('').filter(i => i === key).join('');\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n      if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number((this._maskValue.split('{')[1] ?? '').split('}')[0]) - 4) {\n        return null;\n      }\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n        return this._createValidationError(value);\n      }\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n    if (value) {\n      this.maskFilled.emit();\n      return null;\n    }\n    return null;\n  }\n  onPaste() {\n    this._justPasted = true;\n  }\n  onModelChange(value) {\n    // on form reset we need to update the actualValue\n    if ((value === '' || value === null || value === undefined) && this._maskService.actualValue) {\n      this._maskService.actualValue = this._maskService.getActualValue('');\n    }\n  }\n  onInput(e) {\n    const el = e.target;\n    this._inputValue = el.value;\n    this._setMask();\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    let position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n    let caretShift = 0;\n    let backspaceShift = false;\n    this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n      this._justPasted = false;\n      caretShift = shift;\n      backspaceShift = _backspaceShift;\n    });\n    // only set the selection if the element is active\n    if (this._getActiveElement() !== el) {\n      return;\n    }\n    // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n    if (this._maskExpressionArray.length) {\n      position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n    }\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n    if (positionToApply < 0) {\n      positionToApply = 0;\n    }\n    el.setSelectionRange(positionToApply, positionToApply);\n    this._position = null;\n  }\n  onBlur() {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n    this.onTouch();\n  }\n  onClick(e) {\n    if (!this._maskValue) {\n      return;\n    }\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length &&\n    // eslint-disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n    const nextValue = el && (!el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value);\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n    if (el && el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n    if (el && (el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n    if (el && el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  }\n  // eslint-disable-next-line complexity\n  onKeyDown(e) {\n    if (!this._maskValue) {\n      return;\n    }\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n    this._setMask();\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n      if (e.keyCode === 8 && el.selectionStart !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = this.specialCharacters?.length ? this.specialCharacters : this._config.specialCharacters;\n        if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, el.selectionEnd);\n        } else {\n          if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n            while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ?? '').toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n              el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n            }\n          }\n        }\n      }\n      this.checkSelectionOnDeletion(el);\n      if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n      const cursorStart = el.selectionStart;\n      if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n    if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (e.keyCode === 65 && e.ctrlKey || e.keyCode === 65 && e.metaKey // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n  /** It writes the value in the input */\n  writeValue(inputValue) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n        if ('disable' in inputValue) {\n          _this.setDisabledState(Boolean(inputValue.disable));\n        }\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.value;\n      }\n      if (typeof inputValue === 'number' || _this._maskValue.startsWith('separator')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = _this._maskService.numberToString(inputValue);\n        if (!Array.isArray(_this.decimalMarker)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = _this.decimalMarker !== '.' ? inputValue.replace('.', _this.decimalMarker) : inputValue;\n        }\n        _this._maskService.isNumberValue = true;\n      }\n      if (typeof inputValue !== 'string') {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = '';\n      }\n      _this._inputValue = inputValue;\n      _this._setMask();\n      if (inputValue && _this._maskService.maskExpression || _this._maskService.maskExpression && (_this._maskService.prefix || _this._maskService.showMaskTyped)) {\n        // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n        _this._maskService.writingValue = true;\n        _this._maskService.formElementProperty = ['value', _this._maskService.applyMask(inputValue, _this._maskService.maskExpression)];\n        // Let the service know we've finished writing value\n        _this._maskService.writingValue = false;\n      } else {\n        _this._maskService.formElementProperty = ['value', inputValue];\n      }\n      _this._inputValue = inputValue;\n    })();\n  }\n  registerOnChange(fn) {\n    this._maskService.onChange = this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  checkSelectionOnDeletion(el) {\n    el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n    el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n  }\n  /** It disables the input element */\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce((accum, currVal, index) => {\n      this._start = currVal === '{' ? index : this._start;\n      if (currVal !== '}') {\n        return this._maskService._findSpecialChar(currVal) ? accum + currVal : accum;\n      }\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n      return accum + replaceWith;\n    }, '') || maskExp;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _applyMask() {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n  _validateTime(value) {\n    const rowMaskLen = this._maskValue.split('').filter(s => s !== ':').length;\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if (+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n    return null;\n  }\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n  _setMask() {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        const test = this._maskService.removeMask(this._inputValue)?.length <= this._maskService.removeMask(mask)?.length;\n        if (this._inputValue && test) {\n          this._maskValue = mask;\n          this.maskExpression = mask;\n          this._maskService.maskExpression = mask;\n          return test;\n        } else {\n          const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? '';\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = expression;\n        }\n      });\n    }\n  }\n}\nNgxMaskDirective.ɵfac = function NgxMaskDirective_Factory(t) {\n  return new (t || NgxMaskDirective)();\n};\nNgxMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMaskDirective,\n  selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n  hostBindings: function NgxMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"paste\", function NgxMaskDirective_paste_HostBindingHandler() {\n        return ctx.onPaste();\n      })(\"ngModelChange\", function NgxMaskDirective_ngModelChange_HostBindingHandler($event) {\n        return ctx.onModelChange($event);\n      })(\"input\", function NgxMaskDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      })(\"blur\", function NgxMaskDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"click\", function NgxMaskDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function NgxMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    maskExpression: [\"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\",\n    triggerOnMaskChange: \"triggerOnMaskChange\"\n  },\n  outputs: {\n    maskFilled: \"maskFilled\"\n  },\n  exportAs: [\"mask\", \"ngxMask\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: NgxMaskDirective,\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: NgxMaskDirective,\n    multi: true\n  }, NgxMaskService]), i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      standalone: true,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, NgxMaskService],\n      exportAs: 'mask,ngxMask'\n    }]\n  }], null, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    triggerOnMaskChange: [{\n      type: Input\n    }],\n    maskFilled: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onModelChange: [{\n      type: HostListener,\n      args: ['ngModelChange', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass NgxMaskPipe {\n  constructor() {\n    this.defaultOptions = {};\n    this._maskService = inject(NgxMaskService);\n  }\n  transform(value, mask, {\n    patterns,\n    ...config\n  } = {}) {\n    const currentConfig = {\n      maskExpression: mask,\n      ...this.defaultOptions,\n      ...config,\n      patterns: {\n        ...this._maskService.patterns,\n        ...patterns\n      }\n    };\n    Object.entries(currentConfig).forEach(([key, value]) => {\n      //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n      this._maskService[key] = value;\n    });\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n}\nNgxMaskPipe.ɵfac = function NgxMaskPipe_Factory(t) {\n  return new (t || NgxMaskPipe)();\n};\nNgxMaskPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"mask\",\n  type: NgxMaskPipe,\n  pure: true,\n  standalone: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true,\n      standalone: true\n    }]\n  }], null, null);\n})();\nconst commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskApplierService, NgxMaskDirective, NgxMaskPipe, NgxMaskService, initialConfig, provideEnvironmentNgxMask, provideNgxMask, timeMasks, withoutValidation };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","inject","Injectable","ElementRef","Renderer2","makeEnvironmentProviders","Directive","Input","Output","HostListener","Pipe","DOCUMENT","NG_VALUE_ACCESSOR","NG_VALIDATORS","NGX_MASK_CONFIG","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","triggerOnMaskChange","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","NgxMaskApplierService","constructor","_config","_shift","Set","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substring","percentage","Number","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","i","substr","includes","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","precisionMatchLength","diff","_compareOrIncludes","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","valuesIP","ipError","_validIP","arr","push","cpfCnpjError","startsWith","_stripToDecimal","base","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_shiftStep","daysCount","monthsCount","withoutDays","day1monthInput","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","val","maskSymbol","filter","idx","isDecimalMarker","charsToEscape","inputLength","value","comparedValue","excludedValue","some","index","ɵfac","ɵprov","type","NgxMaskService","arguments","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","onChange","_","document","_elementRef","_renderer","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","maskChar","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkSpecialCharAmount","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","isNaN","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_replaceDecimalMarkerToDot","markers","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","_configFactory","initConfig","configValue","Function","provideNgxMask","provide","useValue","useFactory","provideEnvironmentNgxMask","NgxMaskDirective","_maskValue","_position","_maskExpressionArray","_justPasted","_maskService","self","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","_setMask","c","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","key","lastIndexOf","opt","emit","onPaste","onModelChange","onInput","e","el","target","_inputValue","selectionStart","caretShift","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","onBlur","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","setDisabledState","disable","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currVal","_start","_end","repeatNumber","replaceWith","rowMaskLen","requiredMask","expression","ɵdir","useExisting","args","selector","standalone","providers","exportAs","NgxMaskPipe","defaultOptions","transform","config","currentConfig","Object","entries","forEach","ɵpipe","pure","commonjsGlobal","globalThis","window","global","KeyboardEvent","_eventType","_init"],"sources":["C:/Users/ablem/OneDrive/Projetos/frontEnd-Estudo/ang-eCommerce/node_modules/ngx-mask/fesm2020/ngx-mask.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, makeEnvironmentProviders, Directive, Input, Output, HostListener, Pipe } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // eslint-disable-next-line @typescript-eslint/quotes\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    triggerOnMaskChange: false,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\nclass NgxMaskApplierService {\n    constructor() {\n        this._config = inject(NGX_MASK_CONFIG);\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.hiddenInput = this._config.hiddenInput;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.specialCharacters = this._config.specialCharacters;\n        this.patterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n        this._shift = new Set();\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n            let x = [];\n            let decimalChar = '';\n            if (Array.isArray(decimalChars)) {\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n                x = str.split(regExp);\n                decimalChar = str.match(regExp)?.[0] ?? '';\n            }\n            else {\n                x = str.split(decimalChars);\n                decimalChar = decimalChars;\n            }\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            let res = x[0] ?? '';\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substring(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            for (let i = this.suffix?.length - 1; i >= 0; i--) {\n                const substr = this.suffix.substring(i, this.suffix?.length);\n                if (inputValue.includes(substr) &&\n                    i !== this.suffix?.length - 1 &&\n                    (i - 1 < 0 ||\n                        !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n                    return inputValue.replace(substr, '');\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                // TODO need think about decimalMarker\n                if (Array.isArray(decimalMarker)) {\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                    // eslint-disable-next-line no-param-reassign\n                    decimalMarker = marker ? marker : decimalMarker[0];\n                }\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n                if (precisionMatchLength - 1 > precision) {\n                    const diff = precisionMatchLength - 1 - precision;\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 &&\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return '';\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && inputValue?.length > 0) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            const valuesIP = inputValue.split('.');\n            this.ipError = this._validIP(valuesIP);\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i]?.match('\\\\d')) {\n                arr.push(inputValue[i] ?? '');\n            }\n        }\n        if (maskExpression === 'CPF_CNPJ') {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') ||\n                // eslint-disable-next-line no-useless-escape\n                inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            if (inputValue.indexOf('.') > 0 &&\n                !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue =\n                inputValue.length > 1 &&\n                    inputValue[0] === '0' &&\n                    inputValue[1] !== this.thousandSeparator &&\n                    !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) &&\n                    !backspaced\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            if (backspaced) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator)\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            }\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            //.replace(decimalMarkerEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp) ||\n                (inputValue.length === 1 &&\n                    this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator))) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision = this.getPrecision(maskExpression);\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 &&\n                position > 0 &&\n                !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                // eslint-disable-next-line no-param-reassign\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // eslint-disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? '') {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '') &&\n                    maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? '')) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '') &&\n                    maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? '')) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '')) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            Number(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n                            inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                                inputValue[cursor] !== '/') ||\n                                inputValue[cursor] === '/' ||\n                                (inputValue[cursor - 3] === '/' &&\n                                    Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                                    inputValue[cursor - 1] !== '/') ||\n                                inputValue[cursor - 1] === '/');\n                        // 10<day<31 && month<12 for input\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            !inputValue.slice(cursor - 2, cursor).includes('/') &&\n                            Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthInput ||\n                            day1monthPaste ||\n                            day2monthPaste) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (inputSymbol === ' ' && maskExpression[cursor] === ' ') {\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? '') !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (this.specialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.patterns[maskExpression[cursor] ?? ''] &&\n                    this.patterns[maskExpression[cursor] ?? '']?.optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/)) {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? '') &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? '') &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.specialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? '') !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith('separator')\n            ? cursor\n            : this._shift.has(position)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.specialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.specialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.patterns = this.customPattern ? this.customPattern : this.patterns;\n        return ((this.patterns[maskSymbol]?.pattern &&\n            this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ??\n            false);\n    }\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((i, idx) => {\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\n                ? i === this.decimalMarker\n                : // TODO (inepipenko) use utility type\n                    this.decimalMarker.includes(i);\n            return (i.match('^-?\\\\d') ||\n                i === this.thousandSeparator ||\n                isDecimalMarker ||\n                (i === '-' && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join('');\n    }\n    _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n            ? inputLength\n            : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n    _validIP(valuesIP) {\n        return !(valuesIP.length === 4 &&\n            !valuesIP.some((value, index) => {\n                if (valuesIP.length !== index + 1) {\n                    return value === '' || Number(value) > 255;\n                }\n                return value === '' || Number(value.substring(0, 3)) > 255;\n            }));\n    }\n}\nNgxMaskApplierService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskApplierService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgxMaskApplierService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskApplierService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskApplierService, decorators: [{\n            type: Injectable\n        }] });\n\nclass NgxMaskService extends NgxMaskApplierService {\n    constructor() {\n        super(...arguments);\n        this.isNumberValue = false;\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this.triggerOnMaskChange = false;\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        this.document = inject(DOCUMENT);\n        this._config = inject(NGX_MASK_CONFIG);\n        this._elementRef = inject(ElementRef, { optional: true });\n        this._renderer = inject(Renderer2, { optional: true });\n    }\n    // eslint-disable-next-line complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number'\n            ? inputValue[this.selStart] ?? ''\n            : '';\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined && !this.writingValue) {\n            let actualResult = this.actualValue.split('');\n            // eslint-disable  @typescript-eslint/no-unused-expressions\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            if (this.showMaskTyped) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.removeMask(inputValue);\n            }\n            // eslint-enable  @typescript-eslint/no-unused-expressions\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(''))\n                    : inputValue;\n        }\n        if (this.showMaskTyped) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.removeMask(inputValue);\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.specialCharacters = this.specialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n            );\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length\n                    ? this.hideInput(result, this.maskExpression)\n                    : result;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown;\n        if (this.maskExpression.includes('H')) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((curr, index) => {\n            if (this.patterns &&\n                this.patterns[maskExpression[index] ?? ''] &&\n                this.patterns[maskExpression[index] ?? '']?.symbol) {\n                return this.patterns[maskExpression[index] ?? '']?.symbol;\n            }\n            return curr;\n        })\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res.split('').filter((symbol, i) => {\n            const maskChar = this.maskExpression[i] ?? '';\n            return (this._checkSymbolMask(symbol, maskChar) ||\n                (this.specialCharacters.includes(maskChar) && symbol === maskChar));\n        });\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((currSymbol, index) => {\n                if (this.specialCharacters.includes(inputValue[index + 1] ?? '') &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join('');\n    }\n    /**\n     * Convert number value to string\n     * 3.1415 -> '3.1415'\n     * 1e-7 -> '0.0000001'\n     */\n    numberToString(value) {\n        if (!value && value !== 0) {\n            return String(value);\n        }\n        return Number(value).toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        });\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === 'IP') {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === 'CPF_CNPJ') {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(formElement.value, this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        if (!this._renderer || !this._elementRef) {\n            return;\n        }\n        Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n        const chars = mask\n            .split('')\n            .filter((item) => this._findSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? '';\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === '#') {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? '';\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n     */\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n        }\n        else {\n            this.onChange(this._removeSuffix(inputValue));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === '') {\n            return value;\n        }\n        const num = Number(value);\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.specialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _replaceDecimalMarkerToDot(value) {\n        const markers = Array.isArray(this.decimalMarker)\n            ? this.decimalMarker\n            : [this.decimalMarker];\n        return value.replace(this._regExpForRemove(markers), '.');\n    }\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return Number(separatorValue);\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nNgxMaskService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nNgxMaskService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskService, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * @internal\n */\nfunction _configFactory() {\n    const initConfig = inject(INITIAL_CONFIG);\n    const configValue = inject(NEW_CONFIG);\n    return configValue instanceof Function\n        ? { ...initConfig, ...configValue() }\n        : { ...initConfig, ...configValue };\n}\nfunction provideNgxMask(configValue) {\n    return [\n        {\n            provide: NEW_CONFIG,\n            useValue: configValue,\n        },\n        {\n            provide: INITIAL_CONFIG,\n            useValue: initialConfig,\n        },\n        {\n            provide: NGX_MASK_CONFIG,\n            useFactory: _configFactory,\n        },\n        NgxMaskService,\n    ];\n}\nfunction provideEnvironmentNgxMask(configValue) {\n    return makeEnvironmentProviders(provideNgxMask(configValue));\n}\n\nclass NgxMaskDirective {\n    constructor() {\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this.triggerOnMaskChange = null;\n        this.maskFilled = new EventEmitter();\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        this.document = inject(DOCUMENT);\n        this._maskService = inject(NgxMaskService, { self: true });\n        this._config = inject(NGX_MASK_CONFIG);\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, triggerOnMaskChange, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\n                !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue\n                    .split('||')\n                    .sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray = [];\n                this._maskValue = maskExpression.currentValue || '';\n                this._maskService.maskExpression = this._maskValue;\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.specialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.patterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.specialCharacters = this._maskService.specialCharacters.filter((c) => c !== '-');\n            }\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        this._applyMask();\n    }\n    // eslint-disable-next-line complexity\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            for (const key in this._maskService.patterns) {\n                if (this._maskService.patterns[key]?.optional) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((i) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length ===\n                    this._maskValue.length +\n                        Number((this._maskValue.split('{')[1] ?? '').split('}')[0]) -\n                        4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 &&\n                value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 &&\n                    value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length -\n                        this._maskService.checkSpecialCharAmount(this._maskValue) -\n                        counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return this._createValidationError(value);\n                }\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if ((value === '' || value === null || value === undefined) &&\n            this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue('');\n        }\n    }\n    onInput(e) {\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        let position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        let caretShift = 0;\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n            this._justPasted = false;\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this._getActiveElement() !== el) {\n            return;\n        }\n        // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n        if (this._maskExpressionArray.length) {\n            position =\n                el.selectionStart === 1\n                    ? el.selectionStart + this._maskService.prefix.length\n                    : el.selectionStart;\n        }\n        this._position =\n            this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n            positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n    }\n    onBlur() {\n        if (this._maskValue) {\n            this._maskService.clearIfNotMatchFn();\n        }\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // eslint-disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = el &&\n            (!el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value);\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el && el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if (el &&\n            (el.selectionStart || el.selectionEnd) <=\n                this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el && el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // eslint-disable-next-line complexity\n    onKeyDown(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && el.selectionStart !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = this.specialCharacters?.length\n                    ? this.specialCharacters\n                    : this._config.specialCharacters;\n                if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, el.selectionEnd);\n                }\n                else {\n                    if (this._inputValue.length !== el.selectionStart &&\n                        el.selectionStart !== 1) {\n                        while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ?? '').toString()) &&\n                            ((this.prefix.length >= 1 &&\n                                el.selectionStart > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                        }\n                    }\n                }\n            }\n            this.checkSelectionOnDeletion(el);\n            if (this._maskService.prefix.length &&\n                el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            const cursorStart = el.selectionStart;\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < el.selectionStart) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.keyCode === 65 && e.ctrlKey) ||\n            (e.keyCode === 65 && e.metaKey) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    async writeValue(inputValue) {\n        if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n            if ('disable' in inputValue) {\n                this.setDisabledState(Boolean(inputValue.disable));\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.value;\n        }\n        if (typeof inputValue === 'number' || this._maskValue.startsWith('separator')) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this._maskService.numberToString(inputValue);\n            if (!Array.isArray(this.decimalMarker)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue =\n                    this.decimalMarker !== '.'\n                        ? inputValue.replace('.', this.decimalMarker)\n                        : inputValue;\n            }\n            this._maskService.isNumberValue = true;\n        }\n        if (typeof inputValue !== 'string') {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = '';\n        }\n        this._inputValue = inputValue;\n        this._setMask();\n        if ((inputValue && this._maskService.maskExpression) ||\n            (this._maskService.maskExpression &&\n                (this._maskService.prefix || this._maskService.showMaskTyped))) {\n            // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n            this._maskService.writingValue = true;\n            this._maskService.formElementProperty = [\n                'value',\n                this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n            ];\n            // Let the service know we've finished writing value\n            this._maskService.writingValue = false;\n        }\n        else {\n            this._maskService.formElementProperty = ['value', inputValue];\n        }\n        this._inputValue = inputValue;\n    }\n    registerOnChange(fn) {\n        this._maskService.onChange = this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp\n                .split('')\n                .reduce((accum, currVal, index) => {\n                this._start = currVal === '{' ? index : this._start;\n                if (currVal !== '}') {\n                    return this._maskService._findSpecialChar(currVal)\n                        ? accum + currVal\n                        : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + replaceWith;\n            }, '')) ||\n            maskExp);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue\n            .split('')\n            .filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                const test = this._maskService.removeMask(this._inputValue)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (this._inputValue && test) {\n                    this._maskValue = mask;\n                    this.maskExpression = mask;\n                    this._maskService.maskExpression = mask;\n                    return test;\n                }\n                else {\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? '';\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                expression;\n                }\n            });\n        }\n    }\n}\nNgxMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nNgxMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.2\", type: NgxMaskDirective, isStandalone: true, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", triggerOnMaskChange: \"triggerOnMaskChange\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"blur\": \"onBlur()\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxMaskDirective,\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: NgxMaskDirective,\n            multi: true,\n        },\n        NgxMaskService,\n    ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: NgxMaskDirective,\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: NgxMaskDirective,\n                            multi: true,\n                        },\n                        NgxMaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], propDecorators: { maskExpression: [{\n                type: Input,\n                args: ['mask']\n            }], specialCharacters: [{\n                type: Input\n            }], patterns: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], thousandSeparator: [{\n                type: Input\n            }], decimalMarker: [{\n                type: Input\n            }], dropSpecialCharacters: [{\n                type: Input\n            }], hiddenInput: [{\n                type: Input\n            }], showMaskTyped: [{\n                type: Input\n            }], placeHolderCharacter: [{\n                type: Input\n            }], shownMaskExpression: [{\n                type: Input\n            }], showTemplate: [{\n                type: Input\n            }], clearIfNotMatch: [{\n                type: Input\n            }], validation: [{\n                type: Input\n            }], separatorLimit: [{\n                type: Input\n            }], allowNegativeNumbers: [{\n                type: Input\n            }], leadZeroDateTime: [{\n                type: Input\n            }], triggerOnMaskChange: [{\n                type: Input\n            }], maskFilled: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass NgxMaskPipe {\n    constructor() {\n        this.defaultOptions = {};\n        this._maskService = inject(NgxMaskService);\n    }\n    transform(value, mask, { patterns, ...config } = {}) {\n        const currentConfig = {\n            maskExpression: mask,\n            ...this.defaultOptions,\n            ...config,\n            patterns: {\n                ...this._maskService.patterns,\n                ...patterns,\n            },\n        };\n        Object.entries(currentConfig).forEach(([key, value]) => {\n            //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n            this._maskService[key] = value;\n        });\n        return this._maskService.applyMask(`${value}`, mask);\n    }\n}\nNgxMaskPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNgxMaskPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskPipe, isStandalone: true, name: \"mask\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: NgxMaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                    standalone: true,\n                }]\n        }] });\n\nconst commonjsGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof window !== 'undefined'\n        ? window\n        : typeof global !== 'undefined'\n            ? global\n            : typeof self !== 'undefined'\n                ? self\n                : {};\n(function () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        commonjsGlobal.KeyboardEvent = function (_eventType, _init) { };\n    }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskApplierService, NgxMaskDirective, NgxMaskPipe, NgxMaskService, initialConfig, provideEnvironmentNgxMask, provideNgxMask, timeMasks, withoutValidation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}